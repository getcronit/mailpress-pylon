{"version":3,"file":"index.js","mappingszFA;AAsBA;AAGA;AACA;AACA;AAcA;AACA;AACA;AASA;AACA;AACA;AAYA;AACA;;;ACpEA;AACA;AAOA;AAEA;AAGA;AACA;;;;;;;;;;;;;;ACdA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;AC5FA;AAYA;AAEA;AACA;AAEA;AAEA;AACA;AAIA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAOA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAKA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAMA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AASA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAQA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAQA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AASA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAOA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5yCA;AACA;AACA;AAEA;;;;;;;;;;;;;;;ACJA;AAEA;AACA;AAEA;;AACA;;;;;;;;;;;;;;;ACNA;AAEA;AACA;AAGA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AAEA;AACA;AACA;AAIA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAKA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAKA;AAiBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAqBA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAtLA;AAQA;AAHA;AACA;AACA;AAUA;AAKA;AAHA;AACA;AACA;AAkBA;AAKA;AAHA;AACA;AACA;AAoCA;AAKA;AAHA;AACA;AACA;AAgDA;AAGA;AADA;AAeA;AAKA;AAHA;AACA;AACA;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5KA;AAEA;AACA;AACA;AACA;AAGA;AAWA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;;AArCA;AAUA;AAHA;AACA;AACA;AAgBA;AAKA;AAHA;AACA;AACA;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;AC9CA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AA/FA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AASA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA/BA;AAQA;AAHA;AACA;AACA;AAwBA;;;;;;;;;;;;;;;;;ACzCA;AAEA;AACA;AAIA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAGA;AAUA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAaA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAOA;AACA;AACA;AAEA;AACA;;AAxGA;AA6EA;AADA;AA4BA;AAnGA;AADA;AAIA;AAGA;AADA;AA8BA;AAGA;AADA;AAyBA;AAGA;AADA;AAKA;;;;;;;;;;;;;;;;;ACnFA;AAEA;AACA;AAGA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC9EA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAKA;AACA;AAEA;AAIA;AAEA;AAEA;AAEA;AACA;AAEA;AAIA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvlCA;AADA;AAkCA;;;;;;;;;;;;;;;;;;;;;;;;;AClQA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAKA;AACA;AACA;AACA;AAEA;AAEA;AAMA;AACA;AACA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AAGA;AAMA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AAEA;AAMA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AClLA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAKA;AACA;AACA;AACA;AAEA;AAEA;AAMA;AACA;AACA;AAGA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAGA;AAMA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AAEA;AAMA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;AChMA;AAaA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAghCA;AACA;AACA;AACA","sources":[".././node_modules/@sentry-internal/tracing/cjs/node/integrations/prisma.js",".././src/clients/mailer/src/schema.generated.ts",".././src/clients/mailer/src/index.ts",".././src/config.ts",".././src/index.ts",".././src/repository/.generated.ts",".././src/repository/client.ts",".././src/repository/models/Email.ts",".././src/repository/models/EmailEnvelope.ts",".././src/repository/models/EmailTemplate.ts",".././src/repository/models/OAuthApp.ts",".././src/repository/models/OAuthConfig.ts",".././src/repository/models/Organization.ts",".././src/repository/models/SMTPConfig.ts",".././src/repository/models/User.ts",".././src/repository/models/VariableDefinition.ts",".././src/errors.ts",".././src/services/email-template-factory.ts",".././src/services/mail-factory.ts",".././src/services/oauth/azure.ts",".././src/services/oauth/google.ts",".././src/services/transformer-sandbox.ts","../webpack/bootstrap","../webpack/before-startup","../webpack/startup","../webpack/after-startup"],"sourcesContent":["Object.defineProperty(exports, '__esModule', { value: true });\n\nconst core = require('@sentry/core');\nconst utils = require('@sentry/utils');\nconst debugBuild = require('../../common/debug-build.js');\nconst nodeUtils = require('./utils/node-utils.js');\n\nfunction isValidPrismaClient(possibleClient) {\n  return !!possibleClient && !!(possibleClient )['$use'];\n}\n\n/** Tracing integration for @prisma/client package */\nclass Prisma  {\n  /**\n   * @inheritDoc\n   */\n   static __initStatic() {this.id = 'Prisma';}\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n   constructor(options = {}) {\n    this.name = Prisma.id;\n\n    // We instrument the PrismaClient inside the constructor and not inside `setupOnce` because in some cases of server-side\n    // bundling (Next.js) multiple Prisma clients can be instantiated, even though users don't intend to. When instrumenting\n    // in setupOnce we can only ever instrument one client.\n    // https://github.com/getsentry/sentry-javascript/issues/7216#issuecomment-1602375012\n    // In the future we might explore providing a dedicated PrismaClient middleware instead of this hack.\n    if (isValidPrismaClient(options.client) && !options.client._sentryInstrumented) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      utils.addNonEnumerableProperty(options.client , '_sentryInstrumented', true);\n\n      const clientData = {};\n      try {\n        const engineConfig = (options.client )._engineConfig;\n        if (engineConfig) {\n          const { activeProvider, clientVersion } = engineConfig;\n          if (activeProvider) {\n            clientData['db.system'] = activeProvider;\n          }\n          if (clientVersion) {\n            clientData['db.prisma.version'] = clientVersion;\n          }\n        }\n      } catch (e) {\n        // ignore\n      }\n\n      options.client.$use((params, next) => {\n        // eslint-disable-next-line deprecation/deprecation\n        if (nodeUtils.shouldDisableAutoInstrumentation(core.getCurrentHub)) {\n          return next(params);\n        }\n\n        const action = params.action;\n        const model = params.model;\n\n        return core.startSpan(\n          {\n            name: model ? `${model} ${action}` : action,\n            onlyIfParent: true,\n            op: 'db.prisma',\n            attributes: {\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.db.prisma',\n            },\n            data: { ...clientData, 'db.operation': action },\n          },\n          () => next(params),\n        );\n      });\n    } else {\n      debugBuild.DEBUG_BUILD &&\n        utils.logger.warn('Unsupported Prisma client provided to PrismaIntegration. Provided client:', options.client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n   setupOnce() {\n    // Noop - here for backwards compatibility\n  }\n} Prisma.__initStatic();\n\nexports.Prisma = Prisma;\n//# sourceMappingURL=prisma.js.map\n","\nimport { proxy, arrayProxy, fnProxy, fnArrayProxy, t } from \"snek-query\";\n\n\ntype MailOptionsInput = {\n    from: t.String;\n    to: t.String[];\n    replyTo?: t.String;\n    subject: t.String;\n    text: t.String;\n    html?: t.String;\n};\ntype SMTPOptionsInput = {\n    host: t.String;\n    port: t.NotSupportedYet;\n    secure: t.Boolean;\n    user: t.String;\n    password: t.String;\n};\ntype OAuthOptionsInput = {\n    accessToken: t.String;\n};\n\nexport class Query {\n    __typename: t.String;\n    version: t.String;\n    constructor() { this.__typename = \"\"; this.version = \"\"; }\n}\nexport class Mutation {\n    __typename: t.String;\n    sendMailSMTP: (args: {\n        mailOptions: MailOptionsInput;\n        smtpOptions: SMTPOptionsInput;\n    }) => SentMessageInfo;\n    sendMailAzure: (args: {\n        mailOptions: MailOptionsInput;\n        oauthOptions: OAuthOptionsInput;\n    }) => t.NotSupportedYet;\n    sendMailGoogle: (args: {\n        mailOptions: MailOptionsInput;\n        oauthOptions: OAuthOptionsInput;\n    }) => t.NotSupportedYet;\n    constructor() { this.__typename = \"\"; this.sendMailSMTP = fnProxy(SentMessageInfo); this.sendMailAzure = () => null; this.sendMailGoogle = () => null; }\n}\nexport class SentMessageInfo {\n    __typename: t.String;\n    accepted: t.String[];\n    rejected: t.String[];\n    rejectedErrors: t.Nullable<SMTPError>[];\n    response: t.String;\n    envelopeTime: t.NotSupportedYet;\n    messageTime: t.NotSupportedYet;\n    messageSize: t.NotSupportedYet;\n    constructor() { this.__typename = \"\"; this.accepted = []; this.rejected = []; this.rejectedErrors = arrayProxy(SMTPError); this.response = \"\"; this.envelopeTime = null; this.messageTime = null; this.messageSize = null; }\n}\nexport class SMTPError {\n    __typename: t.String;\n    code: t.Nullable<t.String>;\n    response: t.Nullable<t.String>;\n    responseCode: t.Nullable<t.NotSupportedYet>;\n    command: t.Nullable<t.String>;\n    errno: t.Nullable<t.NotSupportedYet>;\n    path: t.Nullable<t.String>;\n    syscall: t.Nullable<t.String>;\n    name: t.String;\n    message: t.String;\n    stack: t.Nullable<t.String>;\n    constructor() { this.__typename = \"\"; this.code = null; this.response = null; this.responseCode = null; this.command = null; this.errno = null; this.path = null; this.syscall = null; this.name = \"\"; this.message = \"\"; this.stack = null; }\n}\n\n","import { makeSnekQuery } from \"snek-query\";\nimport { Query, Mutation } from \"./schema.generated.js\";\n\n// const apiURL =\n//   process.env.NODE_ENV === \"production\"\n//     ? \"http://mailer:3000/graphql\"\n//     : \"https://services.snek.at/mailer/graphql\";\n\nconst apiURL = \"https://services.snek.at/mailer/graphql\";\n\nexport const sq = makeSnekQuery(\n  { Query, Mutation },\n  {\n    apiURL,\n  }\n);\n","import { generateKeySync } from \"crypto\";\n\nexport const PYLON_URL = process.env.PYLON_URL || \"http://localhost:3000\";\nexport const PYLON_SECRET =\n  process.env.PYLON_SECRET ||\n  generateKeySync(\"hmac\", {\n    length: 32,\n  })\n    .export()\n    .toString(\"base64\");\n","import { PylonAPI, auth, defineService, logger } from \"@cronitio/pylon\";\nimport * as dotenv from \"dotenv\"; // see https://github.com/motdotla/dotenv#how-do-i-use-dotenv-with-import\n\nimport { EmailTemplate } from \"./repository/models/EmailTemplate\";\nimport { OAuthApp } from \"./repository/models/OAuthApp\";\nimport { Organization } from \"./repository/models/Organization\";\nimport { User } from \"./repository/models/User\";\nimport { MailFactory } from \"./services/mail-factory\";\nimport * as oidcAzure from \"./services/oauth/azure\";\nimport * as oidcGoogle from \"./services/oauth/google\";\n\ndotenv.config();\n\n// Method to generate a random string\n\nexport const service = defineService(\n  {\n    Query: {\n      me: User.me,\n      template: EmailTemplate.get,\n      allTemplate: EmailTemplate.all,\n    },\n    Mutation: {\n      templateCreate: EmailTemplate.create,\n      templateUpdate: EmailTemplate.update,\n      templateDelete: EmailTemplate.delete,\n      templateTransformer: EmailTemplate.setTransformer,\n      userEmailCreate: User.createEmail,\n      userEmailUpdate: User.updateEmail,\n      userEmailDelete: User.deleteEmail,\n      organizationSetSenderEmail: Organization.setSenderEmail,\n\n      oauthAppCreate: OAuthApp.create,\n      oauthAppDelete: OAuthApp.delete,\n\n      sendMail: MailFactory.sendMail,\n      sendTemplateMail: MailFactory.sendTemplateMail,\n    },\n  },\n  {\n    context: async (c) => {\n      const auth = c.get(\"auth\");\n\n      let ctx: typeof c & {\n        user?: User;\n      } = c;\n\n      if (auth.active) {\n        const organizationId = auth[\n          \"urn:zitadel:iam:user:resourceowner:id\"\n        ] as string;\n\n        const user = await User.objects.upsert(\n          {\n            id: auth.sub,\n            organization: {\n              connectOrCreate: {\n                create: {\n                  id: organizationId,\n                },\n                where: {\n                  id: organizationId,\n                },\n              },\n            },\n          },\n          {},\n          {\n            id: auth.sub,\n            organizationId,\n          }\n        );\n\n        // Add user to context\n        ctx.user = user;\n      }\n\n      return ctx;\n    },\n  }\n);\n\nexport const configureApp: PylonAPI[\"configureApp\"] = async (app) => {\n  logger.info(\"started\");\n\n  app.use(\"*\", auth.initialize());\n\n  app.use(\"/oauth/google\", oidcGoogle.handler);\n\n  app.use(\"/oauth/google/callback\", oidcGoogle.handlerCb);\n\n  app.use(\"/oauth/azure\", oidcAzure.handler);\n\n  app.use(\"/oauth/azure/callback\", oidcAzure.handlerCb);\n};\n\nexport default service;\n","// @ts-ignore\nimport type {$Enums} from \"@prisma/client\";\n\nimport { Prisma } from \"@prisma/client\";\nimport { Repository, NullableGetFunction, NullablePaginateFunction } from \"@netsnek/prisma-repository\";\n\nimport {Organization as OrganizationModel} from \"./models/Organization\";\nimport {OAuthApp as OAuthAppModel} from \"./models/OAuthApp\";\nimport {User as UserModel} from \"./models/User\";\nimport {Email as EmailModel} from \"./models/Email\";\nimport {SMTPConfig as SMTPConfigModel} from \"./models/SMTPConfig\";\nimport {OAuthConfig as OAuthConfigModel} from \"./models/OAuthConfig\";\nimport {EmailTemplate as EmailTemplateModel} from \"./models/EmailTemplate\";\nimport {VariableDefinition as VariableDefinitionModel} from \"./models/VariableDefinition\";\nimport {EmailEnvelope as EmailEnvelopeModel} from \"./models/EmailEnvelope\";\n\nexport abstract class OrganizationRepository extends Repository {\n\n    constructor(data: Prisma.OrganizationCreateInput) {\n        super();\n\n        const hiddenFields: string[] = [\"emailId\"];\n\n        this.$boostrap(this, data, hiddenFields);\n  }\n\n\n    id!: string;\nasync users (pagination?: Parameters<typeof UserModel.objects.paginate>[0], where?: Parameters<typeof UserModel.objects.paginate>[1], orderBy?: Parameters<typeof UserModel.objects.paginate>[2]) {\n      \n\n\n      const _where = {\n        ...where,\n        organizationId:this.id\n      }\n\n        const Model = (await require('./models/User')).User as typeof UserModel;\n\n      try {\n        return await Model.objects.paginate(\n          pagination, _where, orderBy\n        );\n      } catch (e) {\n        throw e;\n      }\n  \n      \n    };\n\nasync user (where: Parameters<typeof UserModel.objects.get>[0]) {\n          \n    \n          where = {...where, organizationId:this.id};\n    \n          const Model = (await require('./models/User')).User as typeof UserModel;\n    \n          try {\n            return await Model.objects.get(where);\n          }\n          catch (e) {\n            throw e;\n          }\n        };\n\nasync $usersAdd (data: Omit<Prisma.UserCreateArgs['data'], 'organizationId' | 'organization'> ) {\n          const Model = (await require('./models/User')).User as typeof UserModel;\n\n          try {\n            return await Model.objects.create({...data, organizationId: this.id } as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \nasync $usersUpdate (data: Prisma.UserUpdateArgs['data'], where: Prisma.UserUpdateArgs['where']) {\n          const Model = (await require('./models/User')).User as typeof UserModel;\n\n          try {\n            return await Model.objects.update(data, {...where, organizationId: this.id || undefined});\n          } catch (e) {\n            throw e\n          }\n          \n       \n            }\n          \nasync $usersDelete (where: Omit<Prisma.UserDeleteArgs['where'], 'organizationId' | 'organization'>) {\n          const Model = (await require('./models/User')).User as typeof UserModel;\n\n          try {\n            return await Model.objects.delete({...where, organizationId: this.id || undefined} as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      async email (where?: Parameters<NullableGetFunction<typeof EmailModel.objects.get>>[0], orderBy?: Parameters<NullableGetFunction<typeof EmailModel.objects.get>>[1]) {\n      if (!this.$emailId) return null;\n\n\n      const _where = {\n        ...where,\n        id:this.$emailId\n      }\n\n        const Model = (await require('./models/Email')).Email as typeof EmailModel;\n\n      try {\n        return await Model.objects.get(\n          _where, orderBy\n        );\n      } catch (e) {\n        return null;\n      }\n  \n      \n    };\n\nasync $emailAdd (data: Omit<Prisma.EmailCreateArgs['data'], 'id'> ) {\n          const Model = (await require('./models/Email')).Email as typeof EmailModel;\n\n          try {\n            return await Model.objects.create({...data, id: this.$emailId } as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \nasync $emailUpdate (data: Prisma.EmailUpdateArgs['data'], where: Prisma.EmailUpdateArgs['where']) {\n          const Model = (await require('./models/Email')).Email as typeof EmailModel;\n\n          try {\n            return await Model.objects.update(data, {...where, id: this.$emailId || undefined});\n          } catch (e) {\n            throw e\n          }\n          \n       \n            }\n          \nasync $emailDelete (where: Omit<Prisma.EmailDeleteArgs['where'], 'id'>) {\n          const Model = (await require('./models/Email')).Email as typeof EmailModel;\n\n          try {\n            return await Model.objects.delete({...where, id: this.$emailId || undefined} as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      $emailId!: string | null;\nasync oAuthApps (pagination?: Parameters<typeof OAuthAppModel.objects.paginate>[0], where?: Parameters<typeof OAuthAppModel.objects.paginate>[1], orderBy?: Parameters<typeof OAuthAppModel.objects.paginate>[2]) {\n      \n\n\n      const _where = {\n        ...where,\n        organizationId:this.id\n      }\n\n        const Model = (await require('./models/OAuthApp')).OAuthApp as typeof OAuthAppModel;\n\n      try {\n        return await Model.objects.paginate(\n          pagination, _where, orderBy\n        );\n      } catch (e) {\n        throw e;\n      }\n  \n      \n    };\n\nasync oAuthApp (where: Parameters<typeof OAuthAppModel.objects.get>[0]) {\n          \n    \n          where = {...where, organizationId:this.id};\n    \n          const Model = (await require('./models/OAuthApp')).OAuthApp as typeof OAuthAppModel;\n    \n          try {\n            return await Model.objects.get(where);\n          }\n          catch (e) {\n            throw e;\n          }\n        };\n\nasync $oAuthAppsAdd (data: Omit<Prisma.OAuthAppCreateArgs['data'], 'organizationId' | 'organization'> ) {\n          const Model = (await require('./models/OAuthApp')).OAuthApp as typeof OAuthAppModel;\n\n          try {\n            return await Model.objects.create({...data, organizationId: this.id } as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \nasync $oAuthAppsUpdate (data: Prisma.OAuthAppUpdateArgs['data'], where: Prisma.OAuthAppUpdateArgs['where']) {\n          const Model = (await require('./models/OAuthApp')).OAuthApp as typeof OAuthAppModel;\n\n          try {\n            return await Model.objects.update(data, {...where, organizationId: this.id || undefined});\n          } catch (e) {\n            throw e\n          }\n          \n       \n            }\n          \nasync $oAuthAppsDelete (where: Omit<Prisma.OAuthAppDeleteArgs['where'], 'organizationId' | 'organization'>) {\n          const Model = (await require('./models/OAuthApp')).OAuthApp as typeof OAuthAppModel;\n\n          try {\n            return await Model.objects.delete({...where, organizationId: this.id || undefined} as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      redirectUrl!: string | null;\n\n  }\n\nexport abstract class OAuthAppRepository extends Repository {\n\n    constructor(data: Prisma.OAuthAppCreateInput) {\n        super();\n\n        const hiddenFields: string[] = [\"clientSecret\",\"organizationId\"];\n\n        this.$boostrap(this, data, hiddenFields);\n  }\n\n\n    id!: string;\nclientId!: string;\n$clientSecret!: string;\ntype!: $Enums.OAuthProvider;\nasync organization (where?: Parameters<typeof OrganizationModel.objects.get>[0], orderBy?: Parameters<typeof OrganizationModel.objects.get>[1]) {\n      if (!this.$organizationId) throw new Error(\"Relation organizationId is required\");\n\n\n      const _where = {\n        ...where,\n        id:this.$organizationId\n      }\n\n        const Model = (await require('./models/Organization')).Organization as typeof OrganizationModel;\n\n      try {\n        return await Model.objects.get(\n          _where, orderBy\n        );\n      } catch (e) {\n        throw e;\n      }\n  \n      \n    };\n\nasync $organizationAdd (data: Omit<Prisma.OrganizationCreateArgs['data'], 'id'> ) {\n          const Model = (await require('./models/Organization')).Organization as typeof OrganizationModel;\n\n          try {\n            return await Model.objects.create({...data, id: this.$organizationId } as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \nasync $organizationUpdate (data: Prisma.OrganizationUpdateArgs['data'], where: Prisma.OrganizationUpdateArgs['where']) {\n          const Model = (await require('./models/Organization')).Organization as typeof OrganizationModel;\n\n          try {\n            return await Model.objects.update(data, {...where, id: this.$organizationId || undefined});\n          } catch (e) {\n            throw e\n          }\n          \n       \n            }\n          \nasync $organizationDelete (where: Omit<Prisma.OrganizationDeleteArgs['where'], 'id'>) {\n          const Model = (await require('./models/Organization')).Organization as typeof OrganizationModel;\n\n          try {\n            return await Model.objects.delete({...where, id: this.$organizationId || undefined} as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      $organizationId!: string;\n\n  }\n\nexport abstract class UserRepository extends Repository {\n\n    constructor(data: Prisma.UserCreateInput) {\n        super();\n\n        const hiddenFields: string[] = [\"organizationId\"];\n\n        this.$boostrap(this, data, hiddenFields);\n  }\n\n\n    id!: string;\n$organizationId!: string;\nasync emailTemplates (pagination?: Parameters<typeof EmailTemplateModel.objects.paginate>[0], where?: Parameters<typeof EmailTemplateModel.objects.paginate>[1], orderBy?: Parameters<typeof EmailTemplateModel.objects.paginate>[2]) {\n      \n\n\n      const _where = {\n        ...where,\n        creatorId:this.id\n      }\n\n        const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n\n      try {\n        return await Model.objects.paginate(\n          pagination, _where, orderBy\n        );\n      } catch (e) {\n        throw e;\n      }\n  \n      \n    };\n\nasync emailTemplate (where: Parameters<typeof EmailTemplateModel.objects.get>[0]) {\n          \n    \n          where = {...where, creatorId:this.id};\n    \n          const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n    \n          try {\n            return await Model.objects.get(where);\n          }\n          catch (e) {\n            throw e;\n          }\n        };\n\nasync $emailTemplatesAdd (data: Omit<Prisma.EmailTemplateCreateArgs['data'], 'creatorId' | 'creator'> ) {\n          const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n\n          try {\n            return await Model.objects.create({...data, creatorId: this.id } as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \nasync $emailTemplatesUpdate (data: Prisma.EmailTemplateUpdateArgs['data'], where: Prisma.EmailTemplateUpdateArgs['where']) {\n          const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n\n          try {\n            return await Model.objects.update(data, {...where, creatorId: this.id || undefined});\n          } catch (e) {\n            throw e\n          }\n          \n       \n            }\n          \nasync $emailTemplatesDelete (where: Omit<Prisma.EmailTemplateDeleteArgs['where'], 'creatorId' | 'creator'>) {\n          const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n\n          try {\n            return await Model.objects.delete({...where, creatorId: this.id || undefined} as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      async email (where?: Parameters<NullableGetFunction<typeof EmailModel.objects.get>>[0], orderBy?: Parameters<NullableGetFunction<typeof EmailModel.objects.get>>[1]) {\n      \n\n\n      const _where = {\n        ...where,\n        userId:this.id\n      }\n\n        const Model = (await require('./models/Email')).Email as typeof EmailModel;\n\n      try {\n        return await Model.objects.get(\n          _where, orderBy\n        );\n      } catch (e) {\n        return null;\n      }\n  \n      \n    };\n\nasync $emailAdd (data: Omit<Prisma.EmailCreateArgs['data'], 'userId' | 'user'> ) {\n          const Model = (await require('./models/Email')).Email as typeof EmailModel;\n\n          try {\n            return await Model.objects.create({...data, userId: this.id } as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \nasync $emailUpdate (data: Prisma.EmailUpdateArgs['data'], where: Prisma.EmailUpdateArgs['where']) {\n          const Model = (await require('./models/Email')).Email as typeof EmailModel;\n\n          try {\n            return await Model.objects.update(data, {...where, userId: this.id || undefined});\n          } catch (e) {\n            throw e\n          }\n          \n       \n            }\n          \nasync $emailDelete (where: Omit<Prisma.EmailDeleteArgs['where'], 'userId' | 'user'>) {\n          const Model = (await require('./models/Email')).Email as typeof EmailModel;\n\n          try {\n            return await Model.objects.delete({...where, userId: this.id || undefined} as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      async organization (where?: Parameters<typeof OrganizationModel.objects.get>[0], orderBy?: Parameters<typeof OrganizationModel.objects.get>[1]) {\n      if (!this.$organizationId) throw new Error(\"Relation organizationId is required\");\n\n\n      const _where = {\n        ...where,\n        id:this.$organizationId\n      }\n\n        const Model = (await require('./models/Organization')).Organization as typeof OrganizationModel;\n\n      try {\n        return await Model.objects.get(\n          _where, orderBy\n        );\n      } catch (e) {\n        throw e;\n      }\n  \n      \n    };\n\nasync $organizationAdd (data: Omit<Prisma.OrganizationCreateArgs['data'], 'id'> ) {\n          const Model = (await require('./models/Organization')).Organization as typeof OrganizationModel;\n\n          try {\n            return await Model.objects.create({...data, id: this.$organizationId } as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \nasync $organizationUpdate (data: Prisma.OrganizationUpdateArgs['data'], where: Prisma.OrganizationUpdateArgs['where']) {\n          const Model = (await require('./models/Organization')).Organization as typeof OrganizationModel;\n\n          try {\n            return await Model.objects.update(data, {...where, id: this.$organizationId || undefined});\n          } catch (e) {\n            throw e\n          }\n          \n       \n            }\n          \nasync $organizationDelete (where: Omit<Prisma.OrganizationDeleteArgs['where'], 'id'>) {\n          const Model = (await require('./models/Organization')).Organization as typeof OrganizationModel;\n\n          try {\n            return await Model.objects.delete({...where, id: this.$organizationId || undefined} as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \n  }\n\nexport abstract class EmailRepository extends Repository {\n\n    constructor(data: Prisma.EmailCreateInput) {\n        super();\n\n        const hiddenFields: string[] = [\"userId\"];\n\n        this.$boostrap(this, data, hiddenFields);\n  }\n\n\n    id!: string;\nisEnabled!: boolean;\nemail!: string;\nasync smtpConfig (where?: Parameters<NullableGetFunction<typeof SMTPConfigModel.objects.get>>[0], orderBy?: Parameters<NullableGetFunction<typeof SMTPConfigModel.objects.get>>[1]) {\n      \n\n\n      const _where = {\n        ...where,\n        emailId:this.id\n      }\n\n        const Model = (await require('./models/SMTPConfig')).SMTPConfig as typeof SMTPConfigModel;\n\n      try {\n        return await Model.objects.get(\n          _where, orderBy\n        );\n      } catch (e) {\n        return null;\n      }\n  \n      \n    };\n\nasync $smtpConfigAdd (data: Omit<Prisma.SMTPConfigCreateArgs['data'], 'emailId' | 'email'> ) {\n          const Model = (await require('./models/SMTPConfig')).SMTPConfig as typeof SMTPConfigModel;\n\n          try {\n            return await Model.objects.create({...data, emailId: this.id } as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \nasync $smtpConfigUpdate (data: Prisma.SMTPConfigUpdateArgs['data'], where: Prisma.SMTPConfigUpdateArgs['where']) {\n          const Model = (await require('./models/SMTPConfig')).SMTPConfig as typeof SMTPConfigModel;\n\n          try {\n            return await Model.objects.update(data, {...where, emailId: this.id || undefined});\n          } catch (e) {\n            throw e\n          }\n          \n       \n            }\n          \nasync $smtpConfigDelete (where: Omit<Prisma.SMTPConfigDeleteArgs['where'], 'emailId' | 'email'>) {\n          const Model = (await require('./models/SMTPConfig')).SMTPConfig as typeof SMTPConfigModel;\n\n          try {\n            return await Model.objects.delete({...where, emailId: this.id || undefined} as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      async oauthConfig (where?: Parameters<NullableGetFunction<typeof OAuthConfigModel.objects.get>>[0], orderBy?: Parameters<NullableGetFunction<typeof OAuthConfigModel.objects.get>>[1]) {\n      \n\n\n      const _where = {\n        ...where,\n        emailId:this.id\n      }\n\n        const Model = (await require('./models/OAuthConfig')).OAuthConfig as typeof OAuthConfigModel;\n\n      try {\n        return await Model.objects.get(\n          _where, orderBy\n        );\n      } catch (e) {\n        return null;\n      }\n  \n      \n    };\n\nasync $oauthConfigAdd (data: Omit<Prisma.OAuthConfigCreateArgs['data'], 'emailId' | 'email'> ) {\n          const Model = (await require('./models/OAuthConfig')).OAuthConfig as typeof OAuthConfigModel;\n\n          try {\n            return await Model.objects.create({...data, emailId: this.id } as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \nasync $oauthConfigUpdate (data: Prisma.OAuthConfigUpdateArgs['data'], where: Prisma.OAuthConfigUpdateArgs['where']) {\n          const Model = (await require('./models/OAuthConfig')).OAuthConfig as typeof OAuthConfigModel;\n\n          try {\n            return await Model.objects.update(data, {...where, emailId: this.id || undefined});\n          } catch (e) {\n            throw e\n          }\n          \n       \n            }\n          \nasync $oauthConfigDelete (where: Omit<Prisma.OAuthConfigDeleteArgs['where'], 'emailId' | 'email'>) {\n          const Model = (await require('./models/OAuthConfig')).OAuthConfig as typeof OAuthConfigModel;\n\n          try {\n            return await Model.objects.delete({...where, emailId: this.id || undefined} as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      async user (where?: Parameters<NullableGetFunction<typeof UserModel.objects.get>>[0], orderBy?: Parameters<NullableGetFunction<typeof UserModel.objects.get>>[1]) {\n      if (!this.$userId) return null;\n\n\n      const _where = {\n        ...where,\n        id:this.$userId\n      }\n\n        const Model = (await require('./models/User')).User as typeof UserModel;\n\n      try {\n        return await Model.objects.get(\n          _where, orderBy\n        );\n      } catch (e) {\n        return null;\n      }\n  \n      \n    };\n\nasync $userAdd (data: Omit<Prisma.UserCreateArgs['data'], 'id'> ) {\n          const Model = (await require('./models/User')).User as typeof UserModel;\n\n          try {\n            return await Model.objects.create({...data, id: this.$userId } as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \nasync $userUpdate (data: Prisma.UserUpdateArgs['data'], where: Prisma.UserUpdateArgs['where']) {\n          const Model = (await require('./models/User')).User as typeof UserModel;\n\n          try {\n            return await Model.objects.update(data, {...where, id: this.$userId || undefined});\n          } catch (e) {\n            throw e\n          }\n          \n       \n            }\n          \nasync $userDelete (where: Omit<Prisma.UserDeleteArgs['where'], 'id'>) {\n          const Model = (await require('./models/User')).User as typeof UserModel;\n\n          try {\n            return await Model.objects.delete({...where, id: this.$userId || undefined} as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      $userId!: string | null;\nasync organization (where?: Parameters<NullableGetFunction<typeof OrganizationModel.objects.get>>[0], orderBy?: Parameters<NullableGetFunction<typeof OrganizationModel.objects.get>>[1]) {\n      \n\n\n      const _where = {\n        ...where,\n        emailId:this.id\n      }\n\n        const Model = (await require('./models/Organization')).Organization as typeof OrganizationModel;\n\n      try {\n        return await Model.objects.get(\n          _where, orderBy\n        );\n      } catch (e) {\n        return null;\n      }\n  \n      \n    };\n\nasync $organizationAdd (data: Omit<Prisma.OrganizationCreateArgs['data'], 'emailId' | 'email'> ) {\n          const Model = (await require('./models/Organization')).Organization as typeof OrganizationModel;\n\n          try {\n            return await Model.objects.create({...data, emailId: this.id } as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \nasync $organizationUpdate (data: Prisma.OrganizationUpdateArgs['data'], where: Prisma.OrganizationUpdateArgs['where']) {\n          const Model = (await require('./models/Organization')).Organization as typeof OrganizationModel;\n\n          try {\n            return await Model.objects.update(data, {...where, emailId: this.id || undefined});\n          } catch (e) {\n            throw e\n          }\n          \n       \n            }\n          \nasync $organizationDelete (where: Omit<Prisma.OrganizationDeleteArgs['where'], 'emailId' | 'email'>) {\n          const Model = (await require('./models/Organization')).Organization as typeof OrganizationModel;\n\n          try {\n            return await Model.objects.delete({...where, emailId: this.id || undefined} as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \n  }\n\nexport abstract class SMTPConfigRepository extends Repository {\n\n    constructor(data: Prisma.SMTPConfigCreateInput) {\n        super();\n\n        const hiddenFields: string[] = [\"emailId\"];\n\n        this.$boostrap(this, data, hiddenFields);\n  }\n\n\n    id!: string;\nhost!: string;\nport!: number;\nusername!: string;\npassword!: string;\nsecure!: boolean;\nasync email (where?: Parameters<typeof EmailModel.objects.get>[0], orderBy?: Parameters<typeof EmailModel.objects.get>[1]) {\n      if (!this.$emailId) throw new Error(\"Relation emailId is required\");\n\n\n      const _where = {\n        ...where,\n        id:this.$emailId\n      }\n\n        const Model = (await require('./models/Email')).Email as typeof EmailModel;\n\n      try {\n        return await Model.objects.get(\n          _where, orderBy\n        );\n      } catch (e) {\n        throw e;\n      }\n  \n      \n    };\n\nasync $emailAdd (data: Omit<Prisma.EmailCreateArgs['data'], 'id'> ) {\n          const Model = (await require('./models/Email')).Email as typeof EmailModel;\n\n          try {\n            return await Model.objects.create({...data, id: this.$emailId } as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \nasync $emailUpdate (data: Prisma.EmailUpdateArgs['data'], where: Prisma.EmailUpdateArgs['where']) {\n          const Model = (await require('./models/Email')).Email as typeof EmailModel;\n\n          try {\n            return await Model.objects.update(data, {...where, id: this.$emailId || undefined});\n          } catch (e) {\n            throw e\n          }\n          \n       \n            }\n          \nasync $emailDelete (where: Omit<Prisma.EmailDeleteArgs['where'], 'id'>) {\n          const Model = (await require('./models/Email')).Email as typeof EmailModel;\n\n          try {\n            return await Model.objects.delete({...where, id: this.$emailId || undefined} as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      $emailId!: string;\n\n  }\n\nexport abstract class OAuthConfigRepository extends Repository {\n\n    constructor(data: Prisma.OAuthConfigCreateInput) {\n        super();\n\n        const hiddenFields: string[] = [\"accessToken\",\"refreshToken\",\"emailId\"];\n\n        this.$boostrap(this, data, hiddenFields);\n  }\n\n\n    id!: string;\nprovider!: $Enums.OAuthProvider;\n$accessToken!: string;\naccessTokenExpiresAt!: Date;\n$refreshToken!: string;\nasync email (where?: Parameters<typeof EmailModel.objects.get>[0], orderBy?: Parameters<typeof EmailModel.objects.get>[1]) {\n      if (!this.$emailId) throw new Error(\"Relation emailId is required\");\n\n\n      const _where = {\n        ...where,\n        id:this.$emailId\n      }\n\n        const Model = (await require('./models/Email')).Email as typeof EmailModel;\n\n      try {\n        return await Model.objects.get(\n          _where, orderBy\n        );\n      } catch (e) {\n        throw e;\n      }\n  \n      \n    };\n\nasync $emailAdd (data: Omit<Prisma.EmailCreateArgs['data'], 'id'> ) {\n          const Model = (await require('./models/Email')).Email as typeof EmailModel;\n\n          try {\n            return await Model.objects.create({...data, id: this.$emailId } as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \nasync $emailUpdate (data: Prisma.EmailUpdateArgs['data'], where: Prisma.EmailUpdateArgs['where']) {\n          const Model = (await require('./models/Email')).Email as typeof EmailModel;\n\n          try {\n            return await Model.objects.update(data, {...where, id: this.$emailId || undefined});\n          } catch (e) {\n            throw e\n          }\n          \n       \n            }\n          \nasync $emailDelete (where: Omit<Prisma.EmailDeleteArgs['where'], 'id'>) {\n          const Model = (await require('./models/Email')).Email as typeof EmailModel;\n\n          try {\n            return await Model.objects.delete({...where, id: this.$emailId || undefined} as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      $emailId!: string;\n\n  }\n\nexport abstract class EmailTemplateRepository extends Repository {\n\n    constructor(data: Prisma.EmailTemplateCreateInput) {\n        super();\n\n        const hiddenFields: string[] = [\"parentId\",\"creatorId\"];\n\n        this.$boostrap(this, data, hiddenFields);\n  }\n\n\n    id!: string;\ndescription!: string;\ncontent!: string;\nverifyReplyTo!: boolean | null;\ntransformer!: string | null;\nasync envelope (where?: Parameters<NullableGetFunction<typeof EmailEnvelopeModel.objects.get>>[0], orderBy?: Parameters<NullableGetFunction<typeof EmailEnvelopeModel.objects.get>>[1]) {\n      \n\n\n      const _where = {\n        ...where,\n        emailTemplateId:this.id\n      }\n\n        const Model = (await require('./models/EmailEnvelope')).EmailEnvelope as typeof EmailEnvelopeModel;\n\n      try {\n        return await Model.objects.get(\n          _where, orderBy\n        );\n      } catch (e) {\n        return null;\n      }\n  \n      \n    };\n\nasync $envelopeAdd (data: Omit<Prisma.EmailEnvelopeCreateArgs['data'], 'emailTemplateId' | 'emailTemplate'> ) {\n          const Model = (await require('./models/EmailEnvelope')).EmailEnvelope as typeof EmailEnvelopeModel;\n\n          try {\n            return await Model.objects.create({...data, emailTemplateId: this.id } as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \nasync $envelopeUpdate (data: Prisma.EmailEnvelopeUpdateArgs['data'], where: Prisma.EmailEnvelopeUpdateArgs['where']) {\n          const Model = (await require('./models/EmailEnvelope')).EmailEnvelope as typeof EmailEnvelopeModel;\n\n          try {\n            return await Model.objects.update(data, {...where, emailTemplateId: this.id || undefined});\n          } catch (e) {\n            throw e\n          }\n          \n       \n            }\n          \nasync $envelopeDelete (where: Omit<Prisma.EmailEnvelopeDeleteArgs['where'], 'emailTemplateId' | 'emailTemplate'>) {\n          const Model = (await require('./models/EmailEnvelope')).EmailEnvelope as typeof EmailEnvelopeModel;\n\n          try {\n            return await Model.objects.delete({...where, emailTemplateId: this.id || undefined} as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      envelopeId!: string | null;\nasync parent (where?: Parameters<NullableGetFunction<typeof EmailTemplateModel.objects.get>>[0], orderBy?: Parameters<NullableGetFunction<typeof EmailTemplateModel.objects.get>>[1]) {\n      if (!this.$parentId) return null;\n\n\n      const _where = {\n        ...where,\n        id:this.$parentId\n      }\n\n        const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n\n      try {\n        return await Model.objects.get(\n          _where, orderBy\n        );\n      } catch (e) {\n        return null;\n      }\n  \n      \n    };\n\nasync $parentAdd (data: Omit<Prisma.EmailTemplateCreateArgs['data'], 'id'> ) {\n          const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n\n          try {\n            return await Model.objects.create({...data, id: this.$parentId } as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \nasync $parentUpdate (data: Prisma.EmailTemplateUpdateArgs['data'], where: Prisma.EmailTemplateUpdateArgs['where']) {\n          const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n\n          try {\n            return await Model.objects.update(data, {...where, id: this.$parentId || undefined});\n          } catch (e) {\n            throw e\n          }\n          \n       \n            }\n          \nasync $parentDelete (where: Omit<Prisma.EmailTemplateDeleteArgs['where'], 'id'>) {\n          const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n\n          try {\n            return await Model.objects.delete({...where, id: this.$parentId || undefined} as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      $parentId!: string | null;\nasync links (pagination?: Parameters<typeof EmailTemplateModel.objects.paginate>[0], where?: Parameters<typeof EmailTemplateModel.objects.paginate>[1], orderBy?: Parameters<typeof EmailTemplateModel.objects.paginate>[2]) {\n      \n\n\n      const _where = {\n        ...where,\n        parentId:this.id\n      }\n\n        const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n\n      try {\n        return await Model.objects.paginate(\n          pagination, _where, orderBy\n        );\n      } catch (e) {\n        throw e;\n      }\n  \n      \n    };\n\nasync link (where: Parameters<typeof EmailTemplateModel.objects.get>[0]) {\n          \n    \n          where = {...where, parentId:this.id};\n    \n          const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n    \n          try {\n            return await Model.objects.get(where);\n          }\n          catch (e) {\n            throw e;\n          }\n        };\n\nasync $linksAdd (data: Omit<Prisma.EmailTemplateCreateArgs['data'], 'parentId' | 'parent'> ) {\n          const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n\n          try {\n            return await Model.objects.create({...data, parentId: this.id } as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \nasync $linksUpdate (data: Prisma.EmailTemplateUpdateArgs['data'], where: Prisma.EmailTemplateUpdateArgs['where']) {\n          const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n\n          try {\n            return await Model.objects.update(data, {...where, parentId: this.id || undefined});\n          } catch (e) {\n            throw e\n          }\n          \n       \n            }\n          \nasync $linksDelete (where: Omit<Prisma.EmailTemplateDeleteArgs['where'], 'parentId' | 'parent'>) {\n          const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n\n          try {\n            return await Model.objects.delete({...where, parentId: this.id || undefined} as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      async variables (pagination?: Parameters<typeof VariableDefinitionModel.objects.paginate>[0], where?: Parameters<typeof VariableDefinitionModel.objects.paginate>[1], orderBy?: Parameters<typeof VariableDefinitionModel.objects.paginate>[2]) {\n      \n\n\n      const _where = {\n        ...where,\n        emailTemplateId:this.id\n      }\n\n        const Model = (await require('./models/VariableDefinition')).VariableDefinition as typeof VariableDefinitionModel;\n\n      try {\n        return await Model.objects.paginate(\n          pagination, _where, orderBy\n        );\n      } catch (e) {\n        throw e;\n      }\n  \n      \n    };\n\nasync variable (where: Parameters<typeof VariableDefinitionModel.objects.get>[0]) {\n          \n    \n          where = {...where, emailTemplateId:this.id};\n    \n          const Model = (await require('./models/VariableDefinition')).VariableDefinition as typeof VariableDefinitionModel;\n    \n          try {\n            return await Model.objects.get(where);\n          }\n          catch (e) {\n            throw e;\n          }\n        };\n\nasync $variablesAdd (data: Omit<Prisma.VariableDefinitionCreateArgs['data'], 'emailTemplateId' | 'emailTemplate'> ) {\n          const Model = (await require('./models/VariableDefinition')).VariableDefinition as typeof VariableDefinitionModel;\n\n          try {\n            return await Model.objects.create({...data, emailTemplateId: this.id } as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \nasync $variablesUpdate (data: Prisma.VariableDefinitionUpdateArgs['data'], where: Prisma.VariableDefinitionUpdateArgs['where']) {\n          const Model = (await require('./models/VariableDefinition')).VariableDefinition as typeof VariableDefinitionModel;\n\n          try {\n            return await Model.objects.update(data, {...where, emailTemplateId: this.id || undefined});\n          } catch (e) {\n            throw e\n          }\n          \n       \n            }\n          \nasync $variablesDelete (where: Omit<Prisma.VariableDefinitionDeleteArgs['where'], 'emailTemplateId' | 'emailTemplate'>) {\n          const Model = (await require('./models/VariableDefinition')).VariableDefinition as typeof VariableDefinitionModel;\n\n          try {\n            return await Model.objects.delete({...where, emailTemplateId: this.id || undefined} as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      createdAt!: Date;\nupdatedAt!: Date;\nasync creator (where?: Parameters<typeof UserModel.objects.get>[0], orderBy?: Parameters<typeof UserModel.objects.get>[1]) {\n      if (!this.$creatorId) throw new Error(\"Relation creatorId is required\");\n\n\n      const _where = {\n        ...where,\n        id:this.$creatorId\n      }\n\n        const Model = (await require('./models/User')).User as typeof UserModel;\n\n      try {\n        return await Model.objects.get(\n          _where, orderBy\n        );\n      } catch (e) {\n        throw e;\n      }\n  \n      \n    };\n\nasync $creatorAdd (data: Omit<Prisma.UserCreateArgs['data'], 'id'> ) {\n          const Model = (await require('./models/User')).User as typeof UserModel;\n\n          try {\n            return await Model.objects.create({...data, id: this.$creatorId } as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \nasync $creatorUpdate (data: Prisma.UserUpdateArgs['data'], where: Prisma.UserUpdateArgs['where']) {\n          const Model = (await require('./models/User')).User as typeof UserModel;\n\n          try {\n            return await Model.objects.update(data, {...where, id: this.$creatorId || undefined});\n          } catch (e) {\n            throw e\n          }\n          \n       \n            }\n          \nasync $creatorDelete (where: Omit<Prisma.UserDeleteArgs['where'], 'id'>) {\n          const Model = (await require('./models/User')).User as typeof UserModel;\n\n          try {\n            return await Model.objects.delete({...where, id: this.$creatorId || undefined} as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      $creatorId!: string;\n\n  }\n\nexport abstract class VariableDefinitionRepository extends Repository {\n\n    constructor(data: Prisma.VariableDefinitionCreateInput) {\n        super();\n\n        const hiddenFields: string[] = [\"emailTemplateId\"];\n\n        this.$boostrap(this, data, hiddenFields);\n  }\n\n\n    id!: string;\nname!: string;\ndescription!: string | null;\ndefaultValue!: string | null;\nisRequired!: boolean | null;\nisConstant!: boolean | null;\nasync emailTemplate (where?: Parameters<NullableGetFunction<typeof EmailTemplateModel.objects.get>>[0], orderBy?: Parameters<NullableGetFunction<typeof EmailTemplateModel.objects.get>>[1]) {\n      if (!this.$emailTemplateId) return null;\n\n\n      const _where = {\n        ...where,\n        id:this.$emailTemplateId\n      }\n\n        const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n\n      try {\n        return await Model.objects.get(\n          _where, orderBy\n        );\n      } catch (e) {\n        return null;\n      }\n  \n      \n    };\n\nasync $emailTemplateAdd (data: Omit<Prisma.EmailTemplateCreateArgs['data'], 'id'> ) {\n          const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n\n          try {\n            return await Model.objects.create({...data, id: this.$emailTemplateId } as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \nasync $emailTemplateUpdate (data: Prisma.EmailTemplateUpdateArgs['data'], where: Prisma.EmailTemplateUpdateArgs['where']) {\n          const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n\n          try {\n            return await Model.objects.update(data, {...where, id: this.$emailTemplateId || undefined});\n          } catch (e) {\n            throw e\n          }\n          \n       \n            }\n          \nasync $emailTemplateDelete (where: Omit<Prisma.EmailTemplateDeleteArgs['where'], 'id'>) {\n          const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n\n          try {\n            return await Model.objects.delete({...where, id: this.$emailTemplateId || undefined} as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      $emailTemplateId!: string | null;\n\n  }\n\nexport abstract class EmailEnvelopeRepository extends Repository {\n\n    constructor(data: Prisma.EmailEnvelopeCreateInput) {\n        super();\n\n        const hiddenFields: string[] = [\"emailTemplateId\"];\n\n        this.$boostrap(this, data, hiddenFields);\n  }\n\n\n    id!: string;\nsubject!: string | null;\nto!: string[];\nreplyTo!: string | null;\nasync emailTemplate (where?: Parameters<typeof EmailTemplateModel.objects.get>[0], orderBy?: Parameters<typeof EmailTemplateModel.objects.get>[1]) {\n      if (!this.$emailTemplateId) throw new Error(\"Relation emailTemplateId is required\");\n\n\n      const _where = {\n        ...where,\n        id:this.$emailTemplateId\n      }\n\n        const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n\n      try {\n        return await Model.objects.get(\n          _where, orderBy\n        );\n      } catch (e) {\n        throw e;\n      }\n  \n      \n    };\n\nasync $emailTemplateAdd (data: Omit<Prisma.EmailTemplateCreateArgs['data'], 'id'> ) {\n          const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n\n          try {\n            return await Model.objects.create({...data, id: this.$emailTemplateId } as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      \nasync $emailTemplateUpdate (data: Prisma.EmailTemplateUpdateArgs['data'], where: Prisma.EmailTemplateUpdateArgs['where']) {\n          const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n\n          try {\n            return await Model.objects.update(data, {...where, id: this.$emailTemplateId || undefined});\n          } catch (e) {\n            throw e\n          }\n          \n       \n            }\n          \nasync $emailTemplateDelete (where: Omit<Prisma.EmailTemplateDeleteArgs['where'], 'id'>) {\n          const Model = (await require('./models/EmailTemplate')).EmailTemplate as typeof EmailTemplateModel;\n\n          try {\n            return await Model.objects.delete({...where, id: this.$emailTemplateId || undefined} as any);\n          } catch (e) {\n            throw e\n          }\n        }\n      $emailTemplateId!: string;\n\n  }\n\n","import * as Sentry from \"@sentry/bun\";\nimport { PrismaClient } from \"@prisma/client\";\nexport const client = new PrismaClient();\n\nSentry.addIntegration(new Sentry.Integrations.Prisma({ client }));\n","import { ObjectManager } from \"@netsnek/prisma-repository\";\n\nimport { EmailRepository } from \"../.generated\";\nimport { client } from \"../client\";\n\nexport class Email extends EmailRepository {\n  static objects = new ObjectManager<\"Email\", typeof Email>(\n    client.email,\n    Email\n  );\n}\n","import { ObjectManager } from \"@netsnek/prisma-repository\";\n\nimport {client} from \"../client\";\nimport {EmailEnvelopeRepository} from \"../.generated\";\n\n\nexport class EmailEnvelope extends EmailEnvelopeRepository {\n\n  static objects = new ObjectManager<\"EmailEnvelope\", typeof EmailEnvelope>(client.emailEnvelope,EmailEnvelope);\n\n  // Custom logic here...\n}","import { ObjectManager } from \"@netsnek/prisma-repository\";\nimport { ServiceError, requireAuth } from \"@cronitio/pylon\";\n\nimport { client } from \"../client\";\nimport { EmailTemplateRepository } from \"../.generated\";\nimport service from \"../../\";\nimport { Prisma } from \"@prisma/client\";\nimport { User } from \"./User\";\n\nexport class EmailTemplate extends EmailTemplateRepository {\n  static objects = new ObjectManager<\"EmailTemplate\", typeof EmailTemplate>(\n    client.emailTemplate,\n    EmailTemplate\n  );\n\n  @requireAuth({\n    roles: [\"mailpress:admin\"],\n  })\n  static async get(id: string) {\n    const ctx = await service.getContext(this);\n\n    return EmailTemplate.objects.get({\n      id,\n      creator: {\n        organizationId: ctx.user!.$organizationId,\n      },\n    });\n  }\n\n  @requireAuth({\n    roles: [\"mailpress:admin\"],\n  })\n  static async all(\n    pagination?: Parameters<typeof EmailTemplate.objects.paginate>[0],\n    where?: Parameters<typeof EmailTemplate.objects.paginate>[1],\n    orderBy?: Parameters<typeof EmailTemplate.objects.paginate>[2]\n  ) {\n    const ctx = await service.getContext(this);\n\n    return EmailTemplate.objects.paginate(\n      pagination,\n      {\n        ...where,\n        creator: {\n          organizationId: ctx.user!.$organizationId,\n        },\n      },\n      orderBy\n    );\n  }\n\n  @requireAuth({\n    roles: [\"mailpress:admin\"],\n  })\n  static async create(data: {\n    content: string;\n    description: string;\n    variables: {\n      name: string;\n      isRequired?: boolean;\n      isConstant?: boolean;\n      description?: string;\n      defaultValue?: string;\n    }[];\n\n    envelope: {\n      subject?: string;\n      to?: string[];\n      replyTo?: string;\n    };\n  }) {\n    const ctx = await service.getContext(this);\n\n    return ctx.user!.$emailTemplatesAdd({\n      content: data.content,\n      description: data.description,\n      variables: {\n        createMany: {\n          data: data.variables || [],\n        },\n      },\n      envelope: {\n        create: {\n          subject: data.envelope.subject,\n          to: data.envelope.to,\n          replyTo: data.envelope.replyTo,\n        },\n      },\n    });\n  }\n\n  @requireAuth({\n    roles: [\"mailpress:admin\"],\n  })\n  static async update(\n    id: string,\n    data: {\n      content?: string;\n      description?: string;\n      variables: {\n        name: string;\n\n        isRequired?: boolean;\n        isConstant?: boolean;\n        description?: string;\n        defaultValue?: string;\n      }[];\n\n      envelope: {\n        subject?: string;\n        to?: string[];\n        replyTo?: string;\n      };\n    }\n  ) {\n    const ctx = await service.getContext(this);\n\n    return EmailTemplate.objects.update(\n      {\n        content: data.content,\n        description: data.description,\n        variables: {\n          createMany: {\n            data: data.variables || [],\n          },\n        },\n        envelope: {\n          create: {\n            subject: data.envelope.subject,\n            to: data.envelope.to,\n            replyTo: data.envelope.replyTo,\n          },\n        },\n      },\n      {\n        id,\n        creator: {\n          organizationId: ctx.user!.$organizationId,\n        },\n      }\n    );\n  }\n\n  @requireAuth({ roles: [\"mailpress:unsafe-transformer\"] })\n  static async setTransformer(id: string, transformer: string) {\n    const ctx = await service.getContext(this);\n\n    return EmailTemplate.objects.update(\n      {\n        transformer,\n      },\n      {\n        id,\n        creator: {\n          organizationId: ctx.user!.$organizationId,\n        },\n      }\n    );\n  }\n\n  @requireAuth({\n    roles: [\"mailpress:admin\"],\n  })\n  static async delete(id: string) {\n    const ctx = await service.getContext(this);\n\n    return EmailTemplate.objects.delete({\n      id,\n      creator: {\n        organizationId: ctx.user!.$organizationId,\n      },\n    });\n  }\n\n  async creator(\n    where?: Prisma.UserWhereInput | undefined,\n    orderBy?:\n      | Prisma.UserOrderByWithRelationInput\n      | Prisma.UserOrderByWithRelationInput[]\n      | undefined\n  ): Promise<User> {\n    const ctx = await service.getContext(this);\n\n    // Check if userId is owned by the user\n    if (this.$creatorId !== ctx.user!.id) {\n      throw new ServiceError(\"Unauthorized\", {\n        code: \"UNAUTHORIZED\",\n        statusCode: 401,\n      });\n    }\n\n    return super.creator(where, orderBy);\n  }\n}\n","import { ObjectManager } from \"@netsnek/prisma-repository\";\n\nimport { client } from \"../client\";\nimport { OAuthAppRepository } from \"../.generated\";\nimport { requireAuth } from \"@cronitio/pylon\";\nimport service from \"../../\";\nimport { $Enums } from \"@prisma/client\";\n\nexport class OAuthApp extends OAuthAppRepository {\n  static objects = new ObjectManager<\"OAuthApp\", typeof OAuthApp>(\n    client.oAuthApp,\n    OAuthApp\n  );\n\n  // Custom logic here...\n\n  @requireAuth({\n    roles: [\"mailpress:admin\"],\n  })\n  static async create(\n    clientId: string,\n    clientSecret: string,\n    type: $Enums.OAuthProvider\n  ) {\n    const ctx = await service.getContext(this);\n\n    const user = ctx.user!;\n\n    return await OAuthApp.objects.create({\n      clientId,\n      clientSecret,\n      type,\n      organizationId: user.$organizationId,\n    });\n  }\n\n  @requireAuth({\n    roles: [\"mailpress:admin\"],\n  })\n  static async delete(id: string) {\n    const ctx = await service.getContext(this);\n\n    return await OAuthApp.objects.delete({\n      id,\n      organizationId: ctx.user!.$organizationId,\n    });\n  }\n}\n","import { ObjectManager } from \"@netsnek/prisma-repository\";\n\nimport * as oidcGoogle from \"../../services/oauth/google\";\nimport * as oidcAzure from \"../../services/oauth/azure\";\nimport { client } from \"../client\";\nimport { OAuthConfigRepository } from \"../.generated\";\nimport { ServiceError } from \"@cronitio/pylon\";\nimport { PYLON_URL } from \"src/config\";\nimport { Organization } from \"./Organization\";\n\nexport class OAuthConfig extends OAuthConfigRepository {\n  static objects = new ObjectManager<\"OAuthConfig\", typeof OAuthConfig>(\n    client.oAuthConfig,\n    OAuthConfig\n  );\n\n  // Custom logic here...\n\n  async $freshAccessToken() {\n    // Get fresh token set\n\n    const organization = await Organization.objects.get({\n      users: {\n        some: {\n          email: {\n            oauthConfig: {\n              id: this.id,\n            },\n          },\n        },\n      },\n    });\n\n    if (this.provider === \"GOOGLE\") {\n      // Get token set from Google\n\n      if (this.accessTokenExpiresAt > new Date()) {\n        // Token is still valid\n        return this.$accessToken;\n      }\n\n      try {\n        const { client } = await oidcGoogle.getClient(organization);\n\n        const tokenSet = await client.refresh(this.$refreshToken);\n\n        await OAuthConfig.objects.update(\n          {\n            accessToken: tokenSet.access_token,\n            accessTokenExpiresAt: new Date(tokenSet.expires_at! * 1000),\n          },\n          {\n            id: this.id,\n          }\n        );\n\n        return tokenSet.access_token!;\n      } catch (e) {\n        throw new ServiceError(\"Failed to refresh token\", {\n          code: \"FAILED_TO_REFRESH_TOKEN\",\n          statusCode: 500,\n          details: {\n            description: \"Failed to refresh token. Please re-authenticate.\",\n            loginUrl: `${PYLON_URL}/oauth/google`,\n            provider: \"GOOGLE\",\n          },\n        });\n      }\n    } else if (this.provider === \"AZURE\") {\n      // Get token set from Azure\n\n      if (this.accessTokenExpiresAt > new Date()) {\n        // Token is still valid\n        return this.$accessToken;\n      }\n\n      try {\n        const { client } = await oidcAzure.getClient(organization);\n\n        const tokenSet = await client.refresh(this.$refreshToken);\n\n        await OAuthConfig.objects.update(\n          {\n            accessToken: tokenSet.access_token,\n            accessTokenExpiresAt: new Date(tokenSet.expires_at! * 1000),\n          },\n          {\n            id: this.id,\n          }\n        );\n\n        return tokenSet.access_token!;\n      } catch (e) {\n        throw new ServiceError(\"Failed to refresh token\", {\n          code: \"FAILED_TO_REFRESH_TOKEN\",\n          statusCode: 500,\n          details: {\n            description: \"Failed to refresh token. Please re-authenticate.\",\n            loginUrl: `${PYLON_URL}/oauth/azure`,\n            provider: \"AZURE\",\n          },\n        });\n      }\n    }\n\n    throw new Error(`Provider ${this.provider} not supported`);\n  }\n}\n","import { ObjectManager } from \"@netsnek/prisma-repository\";\n\nimport { OrganizationRepository } from \"../.generated\";\nimport { client } from \"../client\";\nimport { requireAuth } from \"@cronitio/pylon\";\nimport { $Enums } from \"@prisma/client\";\nimport { Email } from \"./Email\";\nimport service from \"../..\";\n\nexport class Organization extends OrganizationRepository {\n  static objects = new ObjectManager<\"Organization\", typeof Organization>(\n    client.organization,\n    Organization\n  );\n\n  @requireAuth({\n    roles: [\"mailpress:admin\"],\n  })\n  static async setSenderEmail(\n    email: string,\n    smtpConfig?: {\n      host: string;\n      port: number;\n      secure: boolean;\n      username: string;\n      password: string;\n    }\n  ) {\n    const ctx = await service.getContext(this);\n\n    return await Email.objects.create({\n      email,\n      smtpConfig: {\n        create: smtpConfig,\n      },\n      organization: {\n        connect: {\n          id: ctx.user!.$organizationId,\n        },\n      },\n    });\n  }\n}\n","import { ObjectManager } from \"@netsnek/prisma-repository\";\n\nimport { client } from \"../client\";\nimport { SMTPConfigRepository } from \"../.generated\";\nimport { requireAuth } from \"@cronitio/pylon\";\nimport service from \"../../\";\n\nexport class SMTPConfig extends SMTPConfigRepository {\n  static objects = new ObjectManager<\"SMTPConfig\", typeof SMTPConfig>(\n    client.sMTPConfig,\n    SMTPConfig\n  );\n\n  // Custom logic here...\n}\n","import { ObjectManager } from \"@netsnek/prisma-repository\";\nimport { requireAuth } from \"@cronitio/pylon\";\n\nimport { client } from \"../client\";\nimport { UserRepository } from \"../.generated\";\nimport service from \"../../index\";\nimport { Email } from \"./Email\";\n\nexport class User extends UserRepository {\n  static objects = new ObjectManager<\"User\", typeof User>(client.user, User);\n\n  // Custom logic here...\n\n  @requireAuth({})\n  static async me() {\n    const ctx = await service.getContext(this);\n    return ctx.user;\n  }\n\n  @requireAuth({})\n  static async createEmail(\n    email: string,\n    smtpConfig?: {\n      host: string;\n      port: number;\n      secure: boolean;\n      username: string;\n      password: string;\n    }\n  ) {\n    const ctx = await service.getContext(this);\n\n    return await Email.objects.upsert(\n      {\n        email: email,\n        smtpConfig: {\n          create: smtpConfig,\n        },\n      },\n      {\n        email: email,\n        smtpConfig: {\n          update: smtpConfig,\n        },\n      },\n      {\n        userId: ctx.user!.id,\n      }\n    );\n  }\n\n  @requireAuth({})\n  static async updateEmail(\n    id: string,\n    data: {\n      email?: string;\n      smtpConfig?: {\n        host?: string;\n        port?: number;\n        secure?: boolean;\n        username?: string;\n        password?: string;\n      };\n    }\n  ) {\n    const ctx = await service.getContext(this);\n\n    return await ctx.user!.$emailUpdate(\n      {\n        email: data.email,\n        smtpConfig: {\n          update: data.smtpConfig,\n        },\n      },\n      { id }\n    );\n  }\n\n  @requireAuth({})\n  static async deleteEmail(id: string) {\n    const ctx = await service.getContext(this);\n\n    return await ctx.user!.$emailDelete({ id });\n  }\n\n  @requireAuth({})\n  async $getAuthenticatedEmail() {\n    const ctx = await service.getContext(this);\n\n    const baseUrl = process.env.AUTH_ISSUER;\n\n    const res = await fetch(`${baseUrl}/auth/v1/users/me/email`, {\n      headers: {\n        Authorization: `Bearer ${ctx.req.header(\"authorization\")}`,\n      },\n    });\n\n    if (!res.ok) {\n      throw new Error(\"Failed to fetch user email\");\n    }\n\n    const data = (await res.json()) as {\n      email: {\n        email: string;\n        isEmailVerified: boolean;\n      };\n    };\n\n    if (!data.email.isEmailVerified) {\n      throw new Error(\"User email is not verified\");\n    }\n\n    return data.email.email;\n  }\n}\n","import { ObjectManager } from \"@netsnek/prisma-repository\";\n\nimport {client} from \"../client\";\nimport {VariableDefinitionRepository} from \"../.generated\";\n\n\nexport class VariableDefinition extends VariableDefinitionRepository {\n\n  static objects = new ObjectManager<\"VariableDefinition\", typeof VariableDefinition>(client.variableDefinition,VariableDefinition);\n\n  // Custom logic here...\n}","import { GraphQLError, GraphQLErrorExtensions } from \"graphql\";\n\nexport class TemplateNotFoundError extends GraphQLError {\n  extensions: GraphQLErrorExtensions;\n  constructor(templateId: string) {\n    const message = `No template found with id ${templateId}`;\n    super(message);\n    this.extensions = {\n      statusCode: 404,\n      code: \"TEMPLATE_NOT_FOUND\",\n      description: \"No template was found with the given id\",\n    };\n  }\n}\n\nexport class EnvelopeNotFoundError extends GraphQLError {\n  extensions: GraphQLErrorExtensions;\n  constructor(templateId: string) {\n    const message = `No envelop found for template ${templateId}`;\n    super(message);\n    this.extensions = {\n      statusCode: 404,\n      code: \"ENVELOP_NOT_FOUND\",\n      description: \"No envelop was found for the given template\",\n    };\n  }\n}\n\nexport class TemplateAlreadyExistsError extends GraphQLError {\n  extensions: GraphQLErrorExtensions;\n  constructor(templateId: string) {\n    const message = `Template with id ${templateId} already exists`;\n    super(message);\n    this.extensions = {\n      statusCode: 409,\n      code: \"TEMPLATE_ALREADY_EXISTS\",\n      description: \"A template with the given id already exists\",\n    };\n  }\n}\n\nexport class TemplateVariableValueNotProvidedError extends GraphQLError {\n  extensions: GraphQLErrorExtensions;\n  constructor(variableName: string) {\n    const message = `Value for variable \"${variableName}\" is required but was not provided`;\n    super(message);\n    this.extensions = {\n      statusCode: 400,\n      code: \"VARIABLE_VALUE_NOT_PROVIDED\",\n      description: `A value for the required variable '${variableName}' was not provided`,\n    };\n  }\n}\n\nexport class TemplateVariableIsConstantError extends GraphQLError {\n  extensions: GraphQLErrorExtensions;\n  constructor(variableName: string) {\n    const message = `Variable \"${variableName}\" is constant and cannot be provided`;\n    super(message);\n    this.extensions = {\n      statusCode: 400,\n      code: \"VARIABLE_IS_CONSTANT\",\n      description: `The variable '${variableName}' is constant and cannot be provided`,\n    };\n  }\n}\n\nexport class FromEmailAddressNotAuthorizedError extends GraphQLError {\n  extensions: GraphQLErrorExtensions;\n  constructor(from: string) {\n    const message = `From email address ${from} is not authorized`;\n    super(message);\n    this.extensions = {\n      statusCode: 403,\n      code: \"FROM_EMAIL_ADDRESS_NOT_AUTHORIZED\",\n      description: `The from email address ${from} is not authorized`,\n    };\n  }\n}\n","import { minify } from \"html-minifier\";\nimport Twig from \"twig\";\n\nTwig.extendFilter(\"format_currency\", (value: number, params: false | any[]) => {\n  return new Intl.NumberFormat(\"de-AT\", {\n    style: \"currency\",\n    currency: params ? params[0] : \"EUR\",\n  }).format(value);\n});\n\nimport {\n  EnvelopeNotFoundError,\n  TemplateNotFoundError,\n  TemplateVariableIsConstantError,\n  TemplateVariableValueNotProvidedError,\n} from \"../errors\";\n\nexport interface EmailTemplate {\n  content: string;\n  variables?: TemplateVariables;\n}\n\ninterface TemplateVariables {\n  [variableName: string]: VariableDefinition;\n}\n\ninterface VariableDefinition {\n  defaultValue?: any;\n  isRequired?: boolean;\n  isConstant?: boolean;\n}\n\nexport interface TemplateVariableValues {\n  [variableName: string]: any;\n}\n\nexport class EmailTemplateFactory {\n  private static minifyRenderedTemplate(template: string): string {\n    const result = minify(template, {\n      collapseWhitespace: true,\n      removeComments: true,\n      removeEmptyAttributes: true,\n      removeEmptyElements: true,\n      removeRedundantAttributes: true,\n      removeScriptTypeAttributes: true,\n      removeStyleLinkTypeAttributes: true,\n      useShortDoctype: true,\n    });\n\n    return result;\n  }\n\n  private static getContext(\n    template: EmailTemplate,\n    values: TemplateVariableValues\n  ): any {\n    const context: any = {};\n\n    for (const variableName in template.variables) {\n      if (template.variables.hasOwnProperty(variableName)) {\n        const variable = template.variables[variableName];\n\n        // Check if variable is a constant and has a value provided\n        if (variable.isConstant && variableName in values) {\n          throw new TemplateVariableIsConstantError(variableName);\n        }\n\n        // Check if variable is required and has no value provided\n        if (\n          !variable.isConstant &&\n          !(variableName in values) &&\n          variable.isRequired\n        ) {\n          throw new TemplateVariableValueNotProvidedError(variableName);\n        }\n\n        // Set the context variable to the provided value or default value\n        context[variableName] =\n          values[variableName] || variable.defaultValue || null;\n      }\n    }\n\n    // Add default variables\n    // context.currentTime = () => new Date().toLocaleString();\n\n    return context;\n  }\n\n  private static renderTemplate(\n    template: EmailTemplate,\n    values: TemplateVariableValues = {}\n  ): string {\n    const twigTemplate = Twig.twig({ data: template.content });\n\n    const context = EmailTemplateFactory.getContext(template, values);\n\n    const result = twigTemplate.render(context);\n\n    return EmailTemplateFactory.minifyRenderedTemplate(result);\n  }\n\n  static render(\n    emailTemplate: EmailTemplate,\n    values: TemplateVariableValues = {}\n  ): string {\n    try {\n      return EmailTemplateFactory.renderTemplate(emailTemplate, values);\n    } catch (error) {\n      if (\n        error instanceof TemplateNotFoundError ||\n        error instanceof EnvelopeNotFoundError ||\n        error instanceof TemplateVariableValueNotProvidedError\n      ) {\n        throw error;\n      } else {\n        throw new Error(`Failed to render template: ${error}`);\n      }\n    }\n  }\n}\n","import { ServiceError, requireAuth } from \"@cronitio/pylon\";\nimport { htmlToText } from \"html-to-text\";\nimport { EmailTemplate } from \"../repository/models/EmailTemplate\";\nimport { Email } from \"../repository/models/Email\";\nimport { EmailTemplateFactory } from \"../services/email-template-factory\";\nimport { executeInSandbox } from \"../services/transformer-sandbox\";\nimport { sq } from \"../clients/mailer/src\";\nimport { service } from \"..\";\n\nexport class MailFactory {\n  private static async send(\n    senderEmail: Email,\n    envelope: {\n      subject: string;\n      to: string[];\n      replyTo?: string;\n    },\n    body: string,\n    bodyHTML?: string\n  ) {\n    try {\n      const smtpConfig = await senderEmail.smtpConfig();\n      if (smtpConfig) {\n        if (!smtpConfig) {\n          throw new Error(\n            \"No email configuration found. This should not happen\"\n          );\n        }\n\n        const [data, errors] = await sq.mutate((m) =>\n          m.sendMailSMTP({\n            mailOptions: {\n              from: senderEmail.email,\n              to: envelope.to,\n              replyTo: envelope.replyTo,\n              subject: envelope.subject,\n              html: bodyHTML,\n              text: body,\n            },\n            smtpOptions: {\n              host: smtpConfig.host,\n              port: smtpConfig.port,\n              secure: smtpConfig.secure,\n              user: smtpConfig.username,\n              password: smtpConfig.password,\n            },\n          })\n        );\n\n        if (errors) {\n          throw new Error(errors[0].message);\n        }\n\n        return data;\n      }\n\n      const oauthConfig = await senderEmail.oauthConfig();\n\n      if (oauthConfig) {\n        if (!oauthConfig) {\n          throw new Error(\n            \"No email configuration found. This should not happen\"\n          );\n        }\n\n        const token = await oauthConfig.$freshAccessToken();\n\n        if (oauthConfig.provider === \"AZURE\") {\n          const [data, errors] = await sq.mutate((m) =>\n            m.sendMailAzure({\n              mailOptions: {\n                from: senderEmail.email,\n                to: envelope.to,\n                replyTo: envelope.replyTo,\n                subject: envelope.subject,\n                html: bodyHTML,\n                text: body,\n              },\n              oauthOptions: {\n                accessToken: token,\n              },\n            })\n          );\n\n          if (errors) {\n            throw new Error(errors[0].message);\n          }\n\n          return data;\n        } else if (oauthConfig.provider === \"GOOGLE\") {\n          const [data, errors] = await sq.mutate((m) =>\n            m.sendMailGoogle({\n              mailOptions: {\n                from: senderEmail.email,\n                to: envelope.to,\n                replyTo: envelope.replyTo,\n                subject: envelope.subject,\n                html: bodyHTML,\n                text: body,\n              },\n              oauthOptions: {\n                accessToken: token,\n              },\n            })\n          );\n\n          if (errors) {\n            throw new Error(errors[0].message);\n          }\n\n          return data;\n        }\n      } else {\n        throw new Error(\"No email configuration found\");\n      }\n    } catch (e) {\n      console.error(e);\n      throw new ServiceError(\"Error sending mail\", {\n        code: \"MAIL_SEND_ERROR\",\n        statusCode: 500,\n        details: {\n          error: e.toString(),\n          stack: e.stack,\n        },\n      });\n    }\n  }\n\n  static async sendTemplateMail(\n    id: string,\n    values?: {\n      [variableName: string]: any;\n    }\n  ) {\n    const emailTemplate = await EmailTemplate.objects.get({ id });\n\n    const emailEnvelope = await emailTemplate.envelope();\n\n    let envelope = {\n      subject: emailEnvelope?.subject || \"No subject\",\n      to: emailEnvelope?.to || [],\n      replyTo: emailEnvelope?.replyTo || undefined,\n    };\n\n    const variables = await emailTemplate?.variables();\n\n    const bodyHTML = EmailTemplateFactory.render(\n      {\n        content: emailTemplate?.content,\n        variables: Object.values(variables.nodes).reduce(\n          (acc, variable) => ({\n            ...acc,\n            [variable.name]: variable,\n          }),\n          {}\n        ),\n      },\n      values\n    );\n\n    const body = htmlToText(bodyHTML, {});\n\n    if (emailTemplate.transformer) {\n      const parentTemplate = await emailTemplate.parent();\n\n      const transformedTemplate = await executeInSandbox({\n        input: {\n          envelope,\n          values: values || {},\n          body,\n          bodyHTML,\n        },\n        template: emailTemplate,\n        parentTemplate,\n      });\n\n      if (transformedTemplate) {\n        if (transformedTemplate.verifyReplyTo !== undefined) {\n          emailTemplate.verifyReplyTo = transformedTemplate.verifyReplyTo;\n        }\n\n        if (transformedTemplate.envelope) {\n          envelope = {\n            ...envelope,\n            ...transformedTemplate.envelope,\n          };\n        }\n      }\n    }\n\n    if (emailTemplate.verifyReplyTo) {\n      // Check if user has verified the replyTo email\n      const ctx = await service.getContext(this);\n\n      const auth = ctx.get(\"auth\");\n\n      if (\n        !(\n          auth &&\n          auth.email &&\n          auth.email_verified &&\n          auth.email === envelope.replyTo\n        )\n      ) {\n        throw new Error(\n          \"Verification of replyTo email failed. Possible reasons: User is not authenticated, email is not verified or email does not match the replyTo email\"\n        );\n      }\n    }\n\n    const senderEmail = await Email.objects.get({\n      organization: {\n        users: {\n          some: {\n            id: emailTemplate.$creatorId,\n          },\n        },\n      },\n    });\n\n    await MailFactory.send(senderEmail, envelope, body, bodyHTML);\n\n    return \"Mail scheduled successfully\";\n  }\n\n  @requireAuth({})\n  static async sendMail(\n    envelope: {\n      subject: string;\n      to: string[];\n      replyTo?: string;\n    },\n    body?: string,\n    bodyHTML?: string\n  ) {\n    if (!body && !bodyHTML) {\n      throw new Error(\"No body or bodyHTML provided\");\n    }\n    const ctx = await service.getContext(this);\n\n    const senderEmail = await ctx.user!.email();\n\n    console.log(senderEmail, envelope, body, bodyHTML);\n\n    if (!senderEmail) {\n      throw new Error(\"No sender email found\");\n    }\n\n    if (bodyHTML) {\n      body = htmlToText(bodyHTML, {});\n    }\n\n    if (body === undefined) {\n      throw new Error(\"No body provided. This should not happen\");\n    }\n\n    await MailFactory.send(senderEmail, envelope, body, bodyHTML);\n\n    return \"Mail scheduled successfully\";\n  }\n}\n","import { Handler } from \"hono\";\nimport { getSignedCookie, setSignedCookie } from \"hono/cookie\";\nimport { Issuer, generators } from \"openid-client\";\nimport { PYLON_SECRET, PYLON_URL } from \"../../config\";\nimport { client as prisma } from \"../../repository/client\";\nimport { Organization } from \"../../repository/models/Organization\";\nimport { User } from \"../../repository/models/User\";\nimport { logger } from \"@cronitio/pylon\";\n\nconst issuer = await Issuer.discover(\n  \"https://login.microsoftonline.com/common/v2.0\"\n);\n\nexport const getClient = async (organization: Organization) => {\n  const app = await organization.oAuthApp({ type: \"AZURE\" });\n\n  const client = new issuer.Client({\n    client_id: app.clientId,\n    client_secret: app.$clientSecret,\n    redirect_uris: [`${PYLON_URL}/oauth/azure/callback`],\n    response_types: [\"code\"],\n  });\n\n  return { client, app };\n};\n\nexport const handler: Handler = async (c) => {\n  const _a = c.get(\"auth\")!;\n\n  const organizationId = _a[\"urn:zitadel:iam:user:resourceowner:id\"] as string;\n\n  const user = await User.objects.upsert(\n    {\n      id: _a.sub,\n      organizationId,\n    },\n    {},\n    {\n      id: _a.sub,\n    }\n  );\n\n  // store the userId in your framework's session mechanism, if it is a cookie based solution\n  // it should be httpOnly (not readable by javascript) and encrypted.\n  await setSignedCookie(c, \"google-oauth-sub\", user.id, PYLON_SECRET, {\n    httpOnly: true,\n    secure: true,\n  });\n\n  const code_verifier = generators.codeVerifier();\n\n  await setSignedCookie(\n    c,\n    \"google-oauth-code-verifier\",\n    code_verifier,\n    PYLON_SECRET,\n    {\n      httpOnly: true,\n      secure: true,\n    }\n  );\n\n  const code_challenge = generators.codeChallenge(code_verifier);\n\n  const organization = await user.organization();\n\n  const redirectUrl = c.req.query(\"redirectUrl\") || organization.redirectUrl;\n\n  if (!redirectUrl) {\n    return new Response(\"No redirect URL found\", { status: 400 });\n  }\n\n  // Set cookie\n  await setSignedCookie(\n    c,\n    \"google-azure-redirect-url\",\n    redirectUrl,\n    PYLON_SECRET,\n    {\n      httpOnly: true,\n      secure: true,\n    }\n  );\n\n  const { client } = await getClient(organization);\n\n  const url = client.authorizationUrl({\n    scope: \"openid email profile Mail.send offline_access\",\n    code_challenge,\n    code_challenge_method: \"S256\",\n    access_type: \"offline\",\n    prompt: \"consent\",\n  });\n\n  return c.redirect(url);\n};\n\nexport const handlerCb: Handler = async (c) => {\n  const sub = await getSignedCookie(c, PYLON_SECRET, \"google-oauth-sub\");\n  const code_verifier = await getSignedCookie(\n    c,\n    PYLON_SECRET,\n    \"google-oauth-code-verifier\"\n  );\n\n  if (!sub || !code_verifier) {\n    return new Response(\"Invalid state\", { status: 400 });\n  }\n\n  const organization = await Organization.objects.get({\n    users: {\n      some: {\n        id: sub,\n      },\n    },\n  });\n\n  const redirectUrl = await getSignedCookie(\n    c,\n    PYLON_SECRET,\n    \"google-azure-redirect-url\"\n  );\n\n  const { client } = await getClient(organization);\n\n  const params = client.callbackParams(c.req.url);\n\n  const tokenSet = await client.callback(\n    `${PYLON_URL}/oauth/azure/callback`,\n    params,\n    { code_verifier }\n  );\n\n  const { access_token, refresh_token, expires_at } = tokenSet;\n\n  if (!access_token || !refresh_token || !expires_at) {\n    return new Response(\"Invalid token\", { status: 400 });\n  }\n\n  const claims = tokenSet.claims();\n\n  const email = claims.email;\n\n  if (!email) {\n    logger.error(\"No email found\", { claims });\n    return new Response(\"No email found\", { status: 400 });\n  }\n\n  await prisma.email.upsert({\n    where: {\n      userId: sub,\n    },\n    create: {\n      email,\n      userId: sub,\n      oauthConfig: {\n        create: {\n          provider: \"AZURE\",\n          accessToken: access_token,\n          accessTokenExpiresAt: new Date(expires_at * 1000),\n          refreshToken: refresh_token,\n        },\n      },\n    },\n    update: {\n      email,\n      oauthConfig: {\n        update: {\n          provider: \"AZURE\",\n          accessToken: access_token,\n          accessTokenExpiresAt: new Date(expires_at * 1000),\n          refreshToken: refresh_token,\n        },\n      },\n    },\n  });\n\n  return c.redirect(`${redirectUrl}?type=oauth/azure&status=success`);\n};\n","import { Issuer, generators } from \"openid-client\";\nimport { Handler } from \"hono\";\nimport { setSignedCookie, getSignedCookie } from \"hono/cookie\";\nimport { ServiceError, auth, logger } from \"@cronitio/pylon\";\nimport { client as prisma } from \"../../repository/client\";\nimport { PYLON_SECRET, PYLON_URL } from \"../../config\";\nimport { Organization } from \"../../repository/models/Organization\";\nimport { User } from \"../../repository/models/User\";\n\nimport * as crypto from \"crypto\";\n\nconst issuer = await Issuer.discover(\"https://accounts.google.com\");\n\nexport const getClient = async (organization: Organization) => {\n  console.log(\"getClient, GOT ORG\", organization);\n  try {\n    const app = await organization.oAuthApp({ type: \"GOOGLE\" });\n\n    console.log(\"getClient, GOT APP\", app);\n\n    const client = new issuer.Client({\n      client_id: app.clientId,\n      client_secret: app.$clientSecret,\n      redirect_uris: [`${PYLON_URL}/oauth/google/callback`],\n      response_types: [\"code\"],\n    });\n\n    return { client, app };\n  } catch (e) {\n    console.error(e);\n    throw new ServiceError(\"Error getting client\", e);\n  }\n};\n\nexport const handler: Handler = async (c) => {\n  const token = c.req.query(\"token\");\n\n  console.log(\"handler\", token);\n\n  let newC: typeof c = c;\n\n  if (token) {\n    // Add it as Authorization header\n    c.req.raw.headers.append(\"Authorization\", `Bearer ${token}`);\n\n    c.header(\"Authorization\", `Bearer ${token}`);\n\n    console.log(c.req);\n  }\n\n  console.log(\"handler\", c.req.header(\"Authorization\"));\n\n  await auth.require({})(c, () => Promise.resolve());\n\n  const _a = c.get(\"auth\")!;\n\n  const organizationId = _a[\"urn:zitadel:iam:user:resourceowner:id\"] as string;\n\n  const user = await User.objects.upsert(\n    {\n      id: _a.sub,\n      organizationId,\n    },\n    {},\n    {\n      id: _a.sub,\n    }\n  );\n\n  // store the userId in your framework's session mechanism, if it is a cookie based solution\n  // it should be httpOnly (not readable by javascript) and encrypted.\n  await setSignedCookie(c, \"google-oauth-sub\", user.id, PYLON_SECRET, {\n    httpOnly: true,\n    secure: true,\n  });\n\n  const code_verifier = generators.codeVerifier();\n\n  await setSignedCookie(\n    c,\n    \"google-oauth-code-verifier\",\n    code_verifier,\n    PYLON_SECRET,\n    {\n      httpOnly: true,\n      secure: true,\n    }\n  );\n\n  const code_challenge = generators.codeChallenge(code_verifier);\n\n  const organization = await user.organization();\n\n  console.log(c.req.queries());\n\n  const redirectUrl = c.req.query(\"redirectUrl\") || organization.redirectUrl;\n\n  if (!redirectUrl) {\n    return new Response(\"No redirect URL found\", { status: 400 });\n  }\n\n  // Set cookie\n  await setSignedCookie(\n    c,\n    \"google-oauth-redirect-url\",\n    redirectUrl,\n    PYLON_SECRET,\n    {\n      httpOnly: true,\n      secure: true,\n    }\n  );\n\n  const { client } = await getClient(organization);\n\n  const url = client.authorizationUrl({\n    scope: \"openid email profile https://www.googleapis.com/auth/gmail.send\",\n    code_challenge,\n    code_challenge_method: \"S256\",\n    access_type: \"offline\",\n    prompt: \"consent\",\n  });\n\n  return c.redirect(url);\n};\n\nexport const handlerCb: Handler = async (c) => {\n  const sub = await getSignedCookie(c, PYLON_SECRET, \"google-oauth-sub\");\n  const code_verifier = await getSignedCookie(\n    c,\n    PYLON_SECRET,\n    \"google-oauth-code-verifier\"\n  );\n\n  console.log(\"handlerCb\", sub, code_verifier);\n\n  if (!sub || !code_verifier) {\n    return new Response(\"Invalid state\", { status: 400 });\n  }\n\n  const organization = await Organization.objects.get({\n    users: {\n      some: {\n        id: sub,\n      },\n    },\n  });\n\n  const redirectUrl = await getSignedCookie(\n    c,\n    PYLON_SECRET,\n    \"google-oauth-redirect-url\"\n  );\n\n  const { client } = await getClient(organization);\n\n  const params = client.callbackParams(c.req.url);\n\n  const tokenSet = await client.callback(\n    `${PYLON_URL}/oauth/google/callback`,\n    params,\n    { code_verifier }\n  );\n\n  const { access_token, refresh_token, expires_at } = tokenSet;\n\n  if (!access_token || !refresh_token || !expires_at) {\n    return new Response(\"Invalid token\", { status: 400 });\n  }\n\n  const claims = tokenSet.claims();\n\n  const email = claims.email;\n\n  if (!email) {\n    logger.error(\"No email found\", { claims });\n\n    return new Response(\"No email found\", { status: 400 });\n  }\n\n  await prisma.email.upsert({\n    where: {\n      userId: sub,\n    },\n    create: {\n      email,\n      userId: sub,\n      oauthConfig: {\n        create: {\n          provider: \"GOOGLE\",\n          accessToken: access_token,\n          accessTokenExpiresAt: new Date(expires_at * 1000),\n          refreshToken: refresh_token,\n        },\n      },\n    },\n    update: {\n      email,\n      oauthConfig: {\n        update: {\n          provider: \"GOOGLE\",\n          accessToken: access_token,\n          accessTokenExpiresAt: new Date(expires_at * 1000),\n          refreshToken: refresh_token,\n        },\n      },\n    },\n  });\n\n  return c.redirect(`${redirectUrl}?type=oauth/google&status=success`);\n};\n","// import ivm from \"isolated-vm\";\nimport { EmailTemplate } from \"../repository/models/EmailTemplate\";\nimport { EmailEnvelope } from \"../repository/models/EmailEnvelope\";\n\nexport interface SandboxTemplate {\n  id: string;\n  description: string;\n  transformer: string | null;\n  createdAt: Date;\n  updatedAt: Date;\n  envelope?: {\n    subject?: string;\n    to: string[];\n    replyTo?: string;\n  } | null;\n  verifyReplyTo?: boolean;\n}\n\nexport const executeInSandbox = async (args: {\n  input: {\n    envelope: { subject?: string; to: string[]; replyTo?: string };\n    values: Record<string, string>;\n    body?: string;\n    bodyHTML?: string;\n  };\n  template: EmailTemplate;\n  parentTemplate: EmailTemplate | null;\n}): Promise<{\n  verifyReplyTo: boolean | undefined;\n  envelope: Partial<SandboxTemplate[\"envelope\"]>;\n}> => {\n  const code = args.template.transformer;\n\n  if (!code) {\n    throw new Error(\"No transformer code\");\n  }\n\n  const buildEnvelopeFromTemplate = async (\n    template: EmailTemplate\n  ): Promise<Partial<SandboxTemplate[\"envelope\"]>> => {\n    template;\n    const emailEnvelope = await template.envelope();\n\n    if (emailEnvelope) {\n      const to = emailEnvelope.to;\n      const replyTo = emailEnvelope.replyTo || undefined;\n\n      return {\n        subject: emailEnvelope.subject || undefined,\n        to,\n        replyTo,\n      };\n    }\n  };\n\n  const templateEnvelope = await buildEnvelopeFromTemplate(args.template);\n  const parentTemplateEnvelope = args.parentTemplate\n    ? await buildEnvelopeFromTemplate(args.parentTemplate)\n    : undefined;\n\n  // const sandboxTemplate: SandboxTemplate = {\n  //   id: emailTemplate.id,\n  //   description: emailTemplate.description,\n  //   transformer: emailTemplate.transformer,\n  //   createdAt: emailTemplate.createdAt,\n  //   updatedAt: emailTemplate.updatedAt,\n  //   envelope,\n  // };\n\n  // const isolate = new ivm.Isolate({ memoryLimit: 128 });\n\n  // Create a new context within this isolate. Each context has its own copy of all the builtin\n  // Objects. So for instance if one context does Object.prototype.foo = 1 this would not affect any\n  // other contexts.\n  // const context = isolate.createContextSync();\n\n  // Get a Reference{} to the global object within the context.\n  // const jail = context.global;\n\n  // This makes the global object available in the context as `global`. We use `derefInto()` here\n  // because otherwise `global` would actually be a Reference{} object in the new isolate.\n  // jail.setSync(\"global\", jail.derefInto());\n\n  // const hostile = await isolate.compileScript(`\n  //   const template = ${JSON.stringify(args.template)};\n  //   const parentTemplate = ${JSON.stringify(args.parentTemplate)};\n\n  //   const templateEnvelope = ${JSON.stringify(templateEnvelope)};\n  //   const parentTemplateEnvelope = ${JSON.stringify(parentTemplateEnvelope)};\n  //   const input = ${JSON.stringify(args.input)};\n\n  //   let result = {\n  //     verifyReplyTo: undefined,\n  //     envelope: {},\n  //   };\n  //   ${code}\n  //   result;\n  // `);\n\n  // Execute hostile code in the context.\n  // const result = await hostile.run(context, {\n  //   copy: true,\n  // });\n\n  // IMPORTANT: The following code is unsafe but currently necessary to run the transformer code.\n  // Only unsafe-transformer roles can set the transformer code, so it is assumed to be safe.\n  const result = eval(`const template = ${JSON.stringify(args.template)};\n  const parentTemplate = ${JSON.stringify(args.parentTemplate)};\n\n  const templateEnvelope = ${JSON.stringify(templateEnvelope)};\n  const parentTemplateEnvelope = ${JSON.stringify(parentTemplateEnvelope)};\n  const input = ${JSON.stringify(args.input)};\n\n  let result = {\n    verifyReplyTo: undefined,\n    envelope: {},\n  };\n\n  ${code}\n\n  result;\n  `);\n\n  return result;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6144);\n",""],"names":[],"sourceRoot":""}