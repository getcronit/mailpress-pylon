datasource db {
    provider = "postgresql"

    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Organization {
    id String @id

    users User[]

    email   Email?  @relation(fields: [emailId], references: [id])
    emailId String? @unique @db.Uuid
}

model User {
    id             String @id
    organizationId String

    emailTemplates EmailTemplate[]
    email          Email?

    organization Organization @relation(fields: [organizationId], references: [id])
}

model Email {
    id        String  @id @default(uuid()) @db.Uuid
    isEnabled Boolean @default(true)

    email String

    smtpConfig SMTPConfig?

    oauthConfig OAuthConfig?

    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String? @unique

    organization Organization?
}

model SMTPConfig {
    id String @id @default(uuid()) @db.Uuid

    host     String
    port     Int
    username String
    password String
    secure   Boolean

    email   Email  @relation(fields: [emailId], references: [id], onDelete: Cascade)
    emailId String @unique @db.Uuid
}

model OAuthConfig {
    id String @id @default(uuid()) @db.Uuid

    provider    OAuthProvider
    accessToken String

    email   Email  @relation(fields: [emailId], references: [id], onDelete: Cascade)
    emailId String @unique @db.Uuid
}

model EmailTemplate {
    id            String   @id @default(uuid()) @db.Uuid
    description   String
    content       String
    verifyReplyTo Boolean?
    transformer   String?

    envelope   EmailEnvelope?
    envelopeId String?

    parent   EmailTemplate? @relation("EmailTemplateParent", fields: [parentId], references: [id])
    parentId String?        @db.Uuid

    links EmailTemplate[] @relation("EmailTemplateParent")

    variables VariableDefinition[]

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    creator   User   @relation(fields: [creatorId], references: [id])
    creatorId String
}

model VariableDefinition {
    id          String  @id @default(uuid()) @db.Uuid
    name        String
    description String?

    defaultValue    String?
    isRequired      Boolean?
    isConstant      Boolean?
    emailTemplate   EmailTemplate? @relation(fields: [emailTemplateId], references: [id], onDelete: Cascade)
    emailTemplateId String?        @db.Uuid
}

model EmailEnvelope {
    id      String  @id @default(uuid()) @db.Uuid
    subject String?

    to      String[]
    replyTo String?

    emailTemplate   EmailTemplate @relation(fields: [emailTemplateId], references: [id])
    emailTemplateId String        @unique @db.Uuid
}

enum OAuthProvider {
    GOOGLE
    AZURE
}
